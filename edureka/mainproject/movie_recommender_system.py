# -*- coding: utf-8 -*-
"""MOVIE RECOMMENDER SYSTEM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U74pCbx4Rowh2qVhXQjkCux0bsEUnzCG
"""

import pandas as pd
import matplotlib.pyplot as plt
import ipywidgets as widgets
from IPython.display import display

# Load dataset
movies = pd.read_csv('/content/movies.csv')
ratings = pd.read_csv('/content/ratings.csv')


print("Movies dataset:")
print(movies.info())
print(movies.head())

print("\nRatings dataset:")
print(ratings.info())
print(ratings.head())

# unique users and movies
num_unique_users = ratings['userId'].nunique()
num_unique_movies = ratings['movieId'].nunique()
print("\nNumber of unique users:", num_unique_users)
print("Number of unique movies:", num_unique_movies)

# average rating and Total movies at genre level
average_rating_per_genre = ratings.merge(movies, on='movieId').groupby('genres')['rating'].mean()
total_movies_per_genre = movies['genres'].value_counts()
print("\nAverage rating per genre:\n", average_rating_per_genre)
print("\nTotal movies per genre:\n", total_movies_per_genre)

# finding unique genres considered
unique_genres = movies['genres'].unique()
print("\nUnique genres considered:", unique_genres)


# Popularity-based recommender system at a genre level
def popularity_based_recommender(genre, rating_threshold, num_recommendations):
    # filter movies by genre
    genre_movies = movies[movies['genres'].str.contains(genre)]
    # filter ratings by movieId and ratings
    ratings_filtered = ratings[(ratings['movieId'].isin(genre_movies['movieId'])) &
                               (ratings['rating'] >= rating_threshold)]
    # groupby movieId and calculate average rating and count of ratings
    movie_ratings = ratings_filtered.groupby('movieId')['rating'].agg(['mean', 'count'])
    # filter movies with count greater than 0 (i.e., at least one rating)
    movie_ratings = movie_ratings[movie_ratings['count'] > 0]
    # sort movies by mean rating in descending order
    movie_ratings = movie_ratings.sort_values(by='mean', ascending=False)
    recommended_movies = movie_ratings.merge(movies, on='movieId')
    return recommended_movies.head(num_recommendations)

# Content-based recommender system
def content_based_recommender(movie_title, num_recommendations):
    try:
        # get genres of the input movie
        input_movie = movies[movies['title'] == movie_title].iloc[0]
        input_genres = input_movie['genres']

        # filter movies with similar genres
        similar_movies = movies[movies['genres'].apply(lambda x: any(genre in x for genre in input_genres.split('|')))
                               & (movies['title'] != movie_title)]

        # return top N similar movies
        return similar_movies.head(num_recommendations)
    except IndexError:
        return pd.DataFrame({'Error': ['Movie not found. Please enter a valid movie title.']})



# collaborative-based recommender system
def collaborative_based_recommender(user_id, num_recommendations, threshold):
    #filter ratings by user_id
    user_ratings = ratings[ratings['userId'] == user_id]
    #get movies rated by the user above the threshold
    rated_movies = user_ratings[user_ratings['rating'] >= threshold]
    #group by movieId and count ratings
    rated_movie_counts = rated_movies.groupby('movieId').size().reset_index(name='count')
    #filter movies with count greater than or equal to threshold
    top_movies = rated_movie_counts[rated_movie_counts['count'] >= threshold]
    recommended_movies = top_movies.merge(movies, on='movieId')
    return recommended_movies.head(num_recommendations)


# Define widgets
genre_dropdown = widgets.Dropdown(options=unique_genres, description='Genre:')
rating_threshold_slider = widgets.FloatSlider(min=0, max=5, step=0.1, description='Minimum Rating Threshold:')
num_recommendations_slider = widgets.IntSlider(min=1, max=10, step=1, description='Num Recommendations:')
movie_title_text = widgets.Text(description='Movie Title:')
user_id_text = widgets.IntText(description='User ID:')
threshold_slider = widgets.FloatSlider(min=0, max=5, step=0.1, description='Rating Threshold:')

# Define function to update recommendations
def update_popularity_based(change):
    genre = genre_dropdown.value
    rating_threshold = rating_threshold_slider.value
    num_recommendations = num_recommendations_slider.value
    recommendations = popularity_based_recommender(genre, rating_threshold, num_recommendations)
    display(recommendations)

def update_content_based(change):
    movie_title = movie_title_text.value
    num_recommendations = num_recommendations_slider.value
    recommendations = content_based_recommender(movie_title, num_recommendations)
    display(recommendations)

def update_collaborative_based(change):
    user_id = user_id_text.value
    num_recommendations = num_recommendations_slider.value
    threshold = threshold_slider.value
    recommendations = collaborative_based_recommender(user_id, num_recommendations, threshold)
    display(recommendations)

# Register widget events
genre_dropdown.observe(update_popularity_based, names='value')
rating_threshold_slider.observe(update_popularity_based, names='value')
num_recommendations_slider.observe(update_popularity_based, names='value')

movie_title_text.observe(update_content_based, names='value')
num_recommendations_slider.observe(update_content_based, names='value')

user_id_text.observe(update_collaborative_based, names='value')
num_recommendations_slider.observe(update_collaborative_based, names='value')
threshold_slider.observe(update_collaborative_based, names='value')

# Display widgets
display(widgets.VBox([widgets.HBox([genre_dropdown, rating_threshold_slider, num_recommendations_slider]),
                      widgets.HBox([movie_title_text, num_recommendations_slider]),
                      widgets.HBox([user_id_text, threshold_slider, num_recommendations_slider])]))